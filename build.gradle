description = "Apereo Central Authentication Service"

defaultTasks "clean", "build"

ext {
    publishSnapshots = Boolean.getBoolean("publishSnapshots")
    publishReleases = Boolean.getBoolean("publishReleases")
    sonatypeUsername = System.getProperty("sonatypeUsername")
    sonatypePassword = System.getProperty("sonatypePassword")

    dependencies = [
        aspectjrt: "org.aspectj:aspectjrt:$aspectjVersion",
        aspectjweaver: "org.aspectj:aspectjweaver:$aspectjVersion",
        bcpkix_jdk15on: "org.bouncycastle:bcpkix-jdk15on:$bouncyCastleVersion",
        bcprov_jdk15on: "org.bouncycastle:bcprov-jdk15on:$bouncyCastleVersion",
        c3p0: "com.mchange:c3p0:$c3p0Version",
        cas_client_core: "org.jasig.cas.client:cas-client-core:$casClientVersion",
        cas_server_security_filter: "org.jasig.cas:cas-server-security-filter:$casSecurityFilterVersion",
        commons_codec: "commons-codec:commons-codec:$commonsCodecVersion",
        commons_io: "commons-io:commons-io:$commonsIoVersion",
        commons_jexl: "commons-jexl:commons-jexl:$commonsJexlVersion",
        commons_lang3: "org.apache.commons:commons-lang3:$commonsLangVersion",
        cryptacular: "org.cryptacular:cryptacular:$cryptacularVersion",
        de_flapdoodle_embed_memcached: "de.flapdoodle.embed:de.flapdoodle.embed.memcached:$memcachedEmbeddedVersion",
        disruptor: "com.lmax:disruptor:$disruptorVersion",
        ehcache: "net.sf.ehcache:ehcache:$ehcacheVersion",
        fb_contrib: "com.mebigfatguy.fb-contrib:fb-contrib:$findbugsContribVersion",
        findbugs: "com.google.code.findbugs:findbugs:$findbugsVersion",
        findsecbugs_plugin: "com.h3xstream.findsecbugs:findsecbugs-plugin:$findbugsSecVersion",
        fongo: "com.github.fakemongo:fongo:$fongoVersion",
        groovy_jsr223: "org.codehaus.groovy:groovy-jsr223:$groovyVersion",
        grouperClient: "edu.internet2.middleware.grouper:grouperClient:$grouperVersion",
        guava: "com.google.guava:guava:$guavaVersion",
        hazelcast: "com.hazelcast:hazelcast:$hazelcastVersion",
        hibernate_core: "org.hibernate:hibernate-core:$hibernateVersion",
        hibernate_entitymanager: "org.hibernate:hibernate-entitymanager:$hibernateVersion",
        hibernate_validator: "org.hibernate:hibernate-validator:$hibernateValidatorVersion",
        hsqldb: "org.hsqldb:hsqldb:$hsqlVersion",
        httpclient: "org.apache.httpcomponents:httpclient:$httpclientVersion",
        idp_attribute_filter_api: "net.shibboleth.idp:idp-attribute-filter-api:$idpVersion",
        idp_attribute_resolver_api: "net.shibboleth.idp:idp-attribute-resolver-api:$idpVersion",
        idp_core: "net.shibboleth.idp:idp-core:$idpVersion",
        idp_installer: "net.shibboleth.idp:idp-installer:$idpVersion",
        idp_profile_spring: "net.shibboleth.idp:idp-profile-spring:$idpVersion",
        idp_saml_impl: "net.shibboleth.idp:idp-saml-impl:$idpVersion",
        ignite_core: "org.apache.ignite:ignite-core:$igniteVersion",
        ignite_log4j: "org.apache.ignite:ignite-log4j:$igniteVersion",
        ignite_spring: "org.apache.ignite:ignite-spring:$igniteVersion",
        infinispan_cachestore_remote: "org.infinispan:infinispan-cachestore-remote:$infinispanVersion",
        infinispan_commons: "org.infinispan:infinispan-commons:$infinispanVersion",
        infinispan_core: "org.infinispan:infinispan-core:$infinispanVersion",
        infinispan_embedded: "org.infinispan:infinispan-embedded:$infinispanVersion",
        inspektr_aspects: "org.jasig.inspektr:inspektr-aspects:$inspektrVersion",
        inspektr_audit: "org.jasig.inspektr:inspektr-audit:$inspektrVersion",
        inspektr_support_spring: "org.jasig.inspektr:inspektr-support-spring:$inspektrVersion",
        jackson_databind: "com.fasterxml.jackson.core:jackson-databind:$jacksonDatabindVersion",
        java_client: "com.couchbase.client:java-client:$couchbaseVersion",
        java_getopt: "gnu.getopt:java-getopt:$details.requested.version",
        java_support: "net.shibboleth.utilities:java-support:$shibbolethUtilJavaSupport",
        javassist: "javassist:javassist:$javassistVersion",
        javax_el: "org.glassfish.web:javax.el:$javaxElImplVersion",
        javax_el_api: "javax.el:javax.el-api:$javaxElVersion",
        javax_servlet_api: "javax.servlet:javax.servlet-api:$javaxSevletVersion",
        jcache: "org.ehcache:jcache:$jcacheVersion",
        jcifs: "jcifs:jcifs:$jcifsVersion",
        jcifs_ext: "org.samba.jcifs:jcifs-ext:$jcifsExtVersion",
        jdom: "jdom:jdom:$jdomVersion",
        joda_time: "joda-time:joda-time:$jodaTimeVersion",
        jose4j: "org.bitbucket.b_c:jose4j:$jose4jVersion",
        jradius: "com.github.coova:jradius:$jradiusVersion",
        jsonassert: "org.skyscreamer:jsonassert:$jsonassertVersion",
        jstl: "javax.servlet:jstl:$javaxJstlVersion",
        jta: "javax.transaction:jta:$jtaVersion",
        jul_to_slf4j: "org.slf4j:jul-to-slf4j:$slf4jVersion",
        junit: "junit:junit:$junitVersion",
        kryo: "com.esotericsoftware:kryo:$kryoVersion",
        kryo_serializers: "de.javakaffee:kryo-serializers:$kryoSerializersVersion",
        ldaptive: "org.ldaptive:ldaptive:$ldaptiveVersion",
        ldaptive_beans: "org.ldaptive:ldaptive-beans:$ldaptiveVersion",
        ldaptive_unboundid: "org.ldaptive:ldaptive-unboundid:$ldaptiveVersion",
        log4j_api: "org.apache.logging.log4j:log4j-api:$log4jVersion",
        log4j_core: "org.apache.logging.log4j:log4j-core:$log4jVersion",
        log4j_jcl: "org.apache.logging.log4j:log4j-jcl:$log4jVersion",
        log4j_slf4j_impl: "org.apache.logging.log4j:log4j-slf4j-impl:$log4jVersion",
        log4j_web: "org.apache.logging.log4j:log4j-web:$log4jVersion",
        metrics_annotation: "io.dropwizard.metrics:metrics-annotation:$dropwizardMetricsVersion",
        metrics_core: "io.dropwizard.metrics:metrics-core:$dropwizardMetricsVersion",
        metrics_jvm: "io.dropwizard.metrics:metrics-jvm:$dropwizardMetricsVersion",
        metrics_servlets: "io.dropwizard.metrics:metrics-servlets:$dropwizardMetricsVersion",
        metrics_spring: "com.ryantenney.metrics:metrics-spring:$dropwizardMetricsVersion",
        mockito_core: "org.mockito:mockito-core:$mockitoVersion",
        mongo_java_driver: "org.mongodb:mongo-java-driver:$mongoDriverVersion",
        openid4java: "org.openid4java:openid4java:$openidVersion",
        opensaml_core: "org.opensaml:opensaml-core:$opensamlVersion",
        opensaml_saml_api: "org.opensaml:opensaml-saml-api:$opensamlVersion",
        opensaml_saml_impl: "org.opensaml:opensaml-saml-impl:$opensamlVersion",
        opensaml_soap_api: "org.opensaml:opensaml-soap-api:$opensamlVersion",
        pac4j_cas: "org.pac4j:pac4j-cas:$pac4jVersion",
        pac4j_config: "org.pac4j:pac4j-config:$pac4jVersion",
        pac4j_core: "org.pac4j:pac4j-core:$pac4jVersion",
        pac4j_http: "org.pac4j:pac4j-http:$pac4jVersion",
        pac4j_jwt: "org.pac4j:pac4j-jwt:$pac4jVersion",
        pac4j_mongo: "org.pac4j:pac4j-mongo:$pac4jVersion",
        pac4j_oauth: "org.pac4j:pac4j-oauth:$pac4jVersion",
        pac4j_saml: "org.pac4j:pac4j-saml:$pac4jVersion",
        pac4j_stormpath: "org.pac4j:pac4j-stormpath:$pac4jVersion",
        person_directory_impl: "org.jasig.service.persondir:person-directory-impl:$personDirectoryVersion",
        quartz: "org.quartz-scheduler:quartz:$quartzVersion",
        reflections: "org.reflections:reflections:$reflectionsVersion",
        shiro_core: "org.apache.shiro:shiro-core:$shiroVersion",
        slf4j_api: "org.slf4j:slf4j-api:$slf4jVersion",
        spring_aop: "org.springframework:spring-aop:$springVersion",
        spring_beans: "org.springframework:spring-beans:$springVersion",
        spring_binding: "org.springframework.webflow:spring-binding:$springWebflowVersion",
        spring_context: "org.springframework:spring-context:$springVersion",
        spring_context_support: "org.springframework:spring-context-support:$springVersion",
        spring_core: "org.springframework:spring-core:$springVersion",
        spring_data_mongodb: "org.springframework.data:spring-data-mongodb:$springDataMongoDbVersion",
        spring_expression: "org.springframework:spring-expression:$springVersion",
        spring_jdbc: "org.springframework:spring-jdbc:$springVersion",
        spring_orm: "org.springframework:spring-orm:$springVersion",
        spring_test: "org.springframework:spring-test:$springVersion",
        spring_tx: "org.springframework:spring-tx:$springVersion",
        spring_web: "org.springframework:spring-web:$springVersion",
        spring_webflow: "org.springframework.webflow:spring-webflow:$springWebflowVersion",
        spring_webflow_client_repo: "org.jasig:spring-webflow-client-repo:$springWebflowClientVersion",
        spring_webmvc: "org.springframework:spring-webmvc:$springVersion",
        spring_webmvc_pac4j: "org.pac4j:spring-webmvc-pac4j:$springWebmvcPac4jVersion",
        spymemcached: "net.spy:spymemcached:$spymemcachedVersion",
        standard: "taglibs:standard:$taglibsVersion",
        unboundid_ldapsdk: "com.unboundid:unboundid-ldapsdk:$unboundidVersion",
        validation_api: "javax.validation:validation-api:$javaxValidationVersion",
        xml_apis: "xml-apis:xml-apis:$xmlapisVersion",
        yubico_validation_client2: "com.yubico:yubico-validation-client2:$yubicoVersion"
    ]
}

buildscript {
    repositories {
        mavenLocal()
        jcenter()
        maven {
            url "https://maven.eveoh.nl/content/repositories/releases"
        }
        maven { url "https://plugins.gradle.org/m2/" }
    }

    dependencies {
        classpath "org.akhikhl.gretty:gretty:1.2.4"
        classpath "nl.eveoh:gradle-aspectj:1.6"
    }
}

allprojects {
    apply plugin: "idea"
    apply plugin: "eclipse"
    apply plugin: "maven"
    apply plugin: "signing"
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'checkstyle'
    apply plugin: 'findbugs'
    apply plugin: 'aspectj'
    apply plugin: 'project-report'
    apply from: rootProject.file("gradle/tasks.gradle")

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()

        maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
        maven { url "http://repo.maven.apache.org/maven2" }
        maven { url "https://jitpack.io" }
        maven { url "http://developer.jasig.org/repo/content/groups/m2-legacy/" }
        maven { url "https://build.shibboleth.net/nexus/content/groups/public" }
        maven { url "http://files.couchbase.com/maven2" }
    }

    test {
        enabled = !Boolean.getBoolean("skipTests")
        maxParallelForks = 1
        useJUnit()
        scanForTestClasses false
        include '**/*Tests.*'
        exclude '**/*Abstract*.*'
        classpath = it.classpath + files("${projectDir}/src/main/resources") +
                files("${projectDir}/src/test/resources")
        testLogging {
            events "failed", "standardError"
            exceptionFormat "full"
        }

    }

    configurations {
        tests

        provided
        compile.extendsFrom(provided)
    }

    configurations.all {
        resolutionStrategy {
            if (!Boolean.getBoolean("skipVersionConflict")) {
                failOnVersionConflict()
            }
        }
        exclude(group: "cglib", module: "cglib")
        exclude(group: "cglib", module: "cglib-full")
    }

    artifacts {
        tests testJar

        archives sourcesJar
        archives javadocJar
        archives testJar
    }

    signing {
        required = (publishReleases && sonatypeUsername != null && sonatypePassword != null)
        sign configurations.archives
    }

    sourceSets {
        test.resources.srcDirs = ["${projectDir}/src/test/resources", "${projectDir}/src/test/java"]
    }

    javadoc {
        classpath += configurations.provided
    }

    jar {
        manifest {
            attributes("Implementation-Title": project.name,
                    "Implementation-Vendor": project.group,
                    "Created-By": project.group,
                    "Implementation-Date": new Date(),
                    "Implementation-Version": project.version)
        }
    }

    checkstyle {
        configFile new File(rootDir, "checkstyle-rules.xml")
        configProperties = ["checkstyle.suppressions.file": new File(rootDir, "checkstyle-suppressions.xml")]
        ignoreFailures false
        showViolations true
        toolVersion "${checkstyleVersion}"
    }

    checkstyleTest {
        enabled = !Boolean.getBoolean("skipCheckstyle")
    }

    checkstyleMain {
        enabled = !Boolean.getBoolean("skipCheckstyle")
    }

    findbugs {
        toolVersion = "${findbugsVersion}"
        sourceSets = [sourceSets.main]
        ignoreFailures = true
        reportsDir = file("$project.buildDir/findbugsReports")
        effort = "max"
        reportLevel = "high"
        visitors = ["FindSqlInjection", "SwitchFallthrough"]
        omitVisitors = ["FindNonShortCircuit"]
        includeFilter = file("$rootProject.projectDir/findbugs-rules.xml")
    }

    findbugsMain {
        enabled = !Boolean.getBoolean("skipFindbugs")
    }

    findbugsTest {
        enabled = !Boolean.getBoolean("skipFindbugs")
    }

    dependencies {
        compile group: 'org.aspectj', name: 'aspectjrt', version: aspectjVersion
        compile group: 'org.aspectj', name: 'aspectjweaver', version: aspectjVersion
        compile group: 'javax.validation', name: 'validation-api', version: javaxValidationVersion
        compile group: 'org.slf4j', name: 'slf4j-api', version: slf4jVersion

        if (!Boolean.getBoolean("skipAspectJ")) {
            compile(group: 'org.jasig.inspektr', name: 'inspektr-aspects', version: inspektrVersion) {
                exclude(module: 'validation-api')
                exclude(module: 'aspectjrt')
                exclude(module: 'slf4j-api')
            }

            aspectpath(group: 'org.jasig.inspektr', name: 'inspektr-aspects', version: inspektrVersion) {
                exclude(module: 'validation-api')
                exclude(module: 'aspectjrt')
                exclude(module: 'slf4j-api')
            }
        }

        if (!Boolean.getBoolean("skipFindbugs")) {
            findbugs group: 'com.google.code.findbugs', name: 'findbugs', version: findbugsVersion
            findbugs configurations.findbugsPlugins.dependencies
            findbugsPlugins group: 'com.mebigfatguy.fb-contrib', name: 'fb-contrib', version: findbugsContribVersion
            findbugsPlugins group: 'com.h3xstream.findsecbugs', name: 'findsecbugs-plugin', version: findbugsSecVersion
        }

        runtime(group: 'org.glassfish.web', name: 'javax.el', version: javaxElImplVersion) {
            exclude(module: 'javax.el-api')
        }
        runtime group: 'org.slf4j', name: 'jul-to-slf4j', version: slf4jVersion
        runtime group: 'org.apache.logging.log4j', name: 'log4j-api', version: log4jVersion
        runtime group: 'org.apache.logging.log4j', name: 'log4j-core', version: log4jVersion
        runtime(group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: log4jVersion) {
            exclude(module: 'slf4j-api')
        }
        runtime group: 'org.apache.logging.log4j', name: 'log4j-jcl', version: log4jVersion
        testCompile group: 'junit', name: 'junit', version: junitVersion
        testCompile(group: 'org.mockito', name: 'mockito-core', version: mockitoVersion) {
            exclude(module: 'hamcrest-core')
        }
        testCompile group: 'org.springframework', name: 'spring-test', version: springVersion
        provided group: 'javax.servlet', name: 'javax.servlet-api', version: javaxSevletVersion
        provided group: 'javax.el', name: 'javax.el-api', version: javaxElVersion
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                if (publishReleases) {
                    repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                        authentication(userName: sonatypeUsername, password: sonatypePassword);
                    }
                }

                if (publishSnapshots) {
                    snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots/') {
                        authentication(userName: sonatypeUsername, password: sonatypePassword);
                    }
                }

                pom.project {
                    url "http://www.apereo.org/cas"
                    inceptionYear 2004
                    name project.name
                    description project.name
                    issueManagement {
                        system "Github"
                        url "https://github.com/Jasig/cas/issues"
                    }

                    scm {
                        url 'scm:git@github.com:Jasig/cas.git'
                        connection 'scm:git@github.com:Jasig/cas.git'
                        developerConnection 'scm:git@github.com:Jasig/cas.git'
                    }

                    licenses {
                        license {
                            name 'The Apache Software License, Version 2.0'
                            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                            distribution 'repo'
                        }
                    }

                    developers {
                        developer {
                            id 'leleuj'
                            name 'Jérôme Leleu'
                        }
                        developer {
                            id 'apetro'
                            name 'Andrew Petro'
                        }
                        developer {
                            id 'wgthom'
                            name 'William G. Thompson'
                        }
                        developer {
                            id 'serac'
                            name 'Marvin S. Addison'
                        }
                        developer {
                            id 'battags'
                            name 'Scott Battaglia'
                        }
                        developer {
                            id 'mmoayyed'
                            name 'Misagh Moayyed'
                        }
                        developer {
                            id 'robertoschwald'
                            name 'Robert Oschwald'
                        }
                    }

                    contributors {
                        contributor {
                            name "Adam Rybicki"
                            email "arybicki@unicon.net"
                        }
                        contributor {
                            name "Andrew Tillinghast"
                            email "atilling@conncoll.edu"
                        }
                        contributor {
                            name "Arnaud Lesueur"
                            email "arnaud.lesueur@gmail.com"
                        }
                        contributor {
                            name "Daniel Frett"
                            email "daniel.frett@ccci.org"
                        }
                        contributor {
                            name "Dmitriy Kopylenko"
                            email "dima767@gmail.com"
                        }
                        contributor {
                            name "Drew Mazurek"
                            email "dmazurek@unicon.net"
                        }
                        contributor {
                            name "Eric Dalquist"
                            email "eric.dalquist@doit.wisc.edu"
                        }
                        contributor {
                            name "Eric Pierce"
                            email "epierce@usf.edu"
                        }
                        contributor {
                            name "Frederic Esnault"
                            email "esnault.frederic@gmail.com"
                        }
                        contributor {
                            name "Howard Gilbert"
                            email "Howard.Gilbert@yale.edu"
                        }
                        contributor {
                            name "Jan Van der Velpen"
                            email "velpi@industria.be"
                        }
                        contributor {
                            name "John Martin"
                            email "jmartin@unicon.net"
                        }
                        contributor {
                            name "MarcAntoine Garrigue"
                            email "marc.antoine.garrigue@gmail.com"
                        }
                        contributor {
                            name "Mihir Patel"
                            email "exploremihir@gmail.com"
                        }
                        contributor {
                            name "Fredrik Jönsson"
                            email "fjo@kth.se"
                        }
                    }

                    mailingLists {
                        mailingList {
                            name "cas-user"
                            subscribe "https://groups.google.com/a/apereo.org/forum/#!forum/cas-user"
                            unsubscribe "https://groups.google.com/a/apereo.org/forum/#!forum/cas-user"
                            post "cas-user@apereo.org"
                            archive "https://groups.google.com/forum/#!forum/jasig-cas-user"
                        }
                        mailingList {
                            name "cas-dev"
                            subscribe "https://groups.google.com/a/apereo.org/forum/#!forum/cas-dev"
                            unsubscribe "https://groups.google.com/a/apereo.org/forum/#!forum/cas-dev"
                            post "cas-dev@apereo.org"
                            archive "https://groups.google.com/forum/#!forum/jasig-cas-dev"
                        }
                        mailingList {
                            name "cas-announce"
                            subscribe "https://groups.google.com/a/apereo.org/forum/#!forum/cas-announce"
                            unsubscribe "https://groups.google.com/a/apereo.org/forum/#!forum/cas-announce"
                            post "cas-announce@apereo.org"
                            archive "https://groups.google.com/a/apereo.org/forum/#!forum/cas-announce"
                        }
                    }

                }
            }
        }

    }

}

/**
 * Aggregate all javadocs into a single directory
 **/
task javadoc(type: Javadoc) {
    source subprojects.collect { project -> project.sourceSets.main.allJava }
    destinationDir = new File(buildDir, 'javadoc')
    classpath = files(subprojects.collect { project -> project.sourceSets.main.compileClasspath })
} 
