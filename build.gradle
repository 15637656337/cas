description = "Apereo Central Authentication Service"

defaultTasks "clean", "build"

ext {
    publishSnapshots = Boolean.getBoolean("publishSnapshots")
    publishReleases = Boolean.getBoolean("publishReleases")
    sonatypeUsername = System.getProperty("sonatypeUsername")
    sonatypePassword = System.getProperty("sonatypePassword")
}

ext.libraries = [
        aspectj            : [
                "org.aspectj:aspectjrt:$aspectjVersion",
                "org.aspectj:aspectjweaver:$aspectjVersion"
        ],
        bouncycastle       : [
                "org.bouncycastle:bcpkix-jdk15on:$bouncyCastleVersion",
                "org.cryptacular:cryptacular:$cryptacularVersion",
                "org.bouncycastle:bcprov-jdk15on:$bouncyCastleVersion"
        ],

        casclient          : "org.jasig.cas.client:cas-client-core:$casClientVersion",
        cassecurityfilter  : "org.jasig.cas:cas-server-security-filter:$casSecurityFilterVersion",
        commons            : [
                "commons-codec:commons-codec:$commonsCodecVersion",
                "commons-io:commons-io:$commonsIoVersion",
                "commons-jexl:commons-jexl:$commonsJexlVersion",
                "org.apache.commons:commons-lang3:$commonsLangVersion"
        ],
        ehcache            : [
                "net.sf.ehcache:ehcache:$ehcacheVersion",
                "org.ehcache:jcache:$jcacheVersion",
        ],
        findbugscontrib    : "com.mebigfatguy.fb-contrib:fb-contrib:$findbugsContribVersion",
        findbugs           : "com.google.code.findbugs:findbugs:$findbugsVersion",
        findbugssec        : "com.h3xstream.findsecbugs:findsecbugs-plugin:$findbugsSecVersion",
        groovy             : "org.codehaus.groovy:groovy-jsr223:$groovyVersion",
        grouper            : "edu.internet2.middleware.grouper:grouperClient:$grouperVersion",
        guava              : [
                "com.google.guava:guava:$guavaVersion",
                "org.reflections:reflections:$reflectionsVersion",
                "javassist:javassist:$javassistVersion"
        ],
        hazelcast          : "com.hazelcast:hazelcast:$hazelcastVersion",
        hibernate          : [
                "org.hibernate:hibernate-core:$hibernateVersion",
                "org.hibernate:hibernate-entitymanager:$hibernateVersion",
                "org.hibernate:hibernate-validator:$hibernateValidatorVersion",
                "com.mchange:c3p0:$c3p0Version"
        ],
        httpclient         : "org.apache.httpcomponents:httpclient:$httpclientVersion",
        shibidp            : [
                "net.shibboleth.idp:idp-attribute-filter-api:$idpVersion",
                "net.shibboleth.idp:idp-attribute-resolver-api:$idpVersion",
                "net.shibboleth.idp:idp-core:$idpVersion",
                "net.shibboleth.idp:idp-installer:$idpVersion",
                "net.shibboleth.idp:idp-profile-spring:$idpVersion",
                "net.shibboleth.idp:idp-saml-impl:$idpVersion",
                "net.shibboleth.utilities:java-support:$shibbolethUtilJavaSupport",
        ],
        ignite             : [
                "org.apache.ignite:ignite-core:$igniteVersion",
                "org.apache.ignite:ignite-log4j:$igniteVersion",
                "org.apache.ignite:ignite-spring:$igniteVersion"
        ],
        infinispan         : [
                "org.infinispan:infinispan-cachestore-remote:$infinispanVersion",
                "org.infinispan:infinispan-commons:$infinispanVersion",
                "org.infinispan:infinispan-core:$infinispanVersion",
                "org.infinispan:infinispan-embedded:$infinispanVersion"
        ],
        inspektr           : [
                dependencies.create("org.jasig.inspektr:inspektr-aspects:$inspektrVersion") {
                    exclude(module: 'validation-api')
                    exclude(module: 'aspectjrt')
                    exclude(module: 'slf4j-api')
                },
                "org.jasig.inspektr:inspektr-audit:$inspektrVersion",
                "org.jasig.inspektr:inspektr-support-spring:$inspektrVersion",
        ],
        javax              : [
                "taglibs:standard:$taglibsVersion",
                "org.glassfish.web:javax.el:$javaxElImplVersion",
                "javax.el:javax.el-api:$javaxElVersion",
                "javax.servlet:javax.servlet-api:$javaxSevletVersion",
                "javax.servlet:jstl:$javaxJstlVersion",
                "javax.transaction:jta:$jtaVersion"
        ],
        jackson            : "com.fasterxml.jackson.core:jackson-databind:$jacksonDatabindVersion",
        couchbase          : "com.couchbase.client:java-client:$couchbaseVersion",

        jcifs              : [
                "jcifs:jcifs:$jcifsVersion",
                "org.samba.jcifs:jcifs-ext:$jcifsExtVersion",
        ],
        jdom               : "jdom:jdom:$jdomVersion",
        jodatime           : "joda-time:joda-time:$jodaTimeVersion",
        jose4j             : "org.bitbucket.b_c:jose4j:$jose4jVersion",
        jradius            : [
                "com.github.coova:jradius:$jradiusVersion",
                "gnu.getopt:java-getopt:1.0.13"
        ],
        tests              : [
                dependencies.create("org.mockito:mockito-core:$mockitoVersion") {
                    exclude(module: 'hamcrest-core')
                },
                "junit:junit:$junitVersion",
                "com.unboundid:unboundid-ldapsdk:$unboundidVersion",
                "com.github.fakemongo:fongo:$fongoVersion",
                "de.flapdoodle.embed:de.flapdoodle.embed.memcached:$memcachedEmbeddedVersion",
                "org.hsqldb:hsqldb:$hsqlVersion",
                "org.skyscreamer:jsonassert:$jsonassertVersion",
                "org.springframework:spring-test:$springVersion"
        ],
        memcached          : [
                "net.spy:spymemcached:$spymemcachedVersion",
                "com.esotericsoftware:kryo:$kryoVersion",
                "de.javakaffee:kryo-serializers:$kryoSerializersVersion",
                "org.jasig.inspektr:inspektr-support-spring:$inspektrVersion"
        ],
        ldaptive           : [
                "org.ldaptive:ldaptive:$ldaptiveVersion",
                "org.ldaptive:ldaptive-beans:$ldaptiveVersion",
                "org.ldaptive:ldaptive-unboundid:$ldaptiveVersion",
        ],
        log4j              : [
                "org.apache.logging.log4j:log4j-api:$log4jVersion",
                "org.apache.logging.log4j:log4j-core:$log4jVersion",
                "org.apache.logging.log4j:log4j-jcl:$log4jVersion",
                dependencies.create("org.apache.logging.log4j:log4j-slf4j-impl:$log4jVersion") {
                    exclude(module: 'slf4j-api')
                },
                "org.apache.logging.log4j:log4j-web:$log4jVersion",
                "org.slf4j:slf4j-api:$slf4jVersion",
                "org.slf4j:jul-to-slf4j:$slf4jVersion",
                "com.lmax:disruptor:$disruptorVersion"
        ],
        metrics            : [
                "io.dropwizard.metrics:metrics-annotation:$dropwizardMetricsVersion",
                "io.dropwizard.metrics:metrics-core:$dropwizardMetricsVersion",
                "io.dropwizard.metrics:metrics-jvm:$dropwizardMetricsVersion",
                "io.dropwizard.metrics:metrics-servlets:$dropwizardMetricsVersion",
                "com.ryantenney.metrics:metrics-spring:$dropwizardMetricsVersion"
        ],
        mongo              : "org.mongodb:mongo-java-driver:$mongoDriverVersion",
        openid4java        : "org.openid4java:openid4java:$openidVersion",
        opensaml           : [
                "org.opensaml:opensaml-core:$opensamlVersion",
                "org.opensaml:opensaml-saml-api:$opensamlVersion",
                "org.opensaml:opensaml-soap-api:$opensamlVersion"
        ],
        pac4j              : [
                "org.pac4j:pac4j-cas:$pac4jVersion",
                "org.pac4j:pac4j-config:$pac4jVersion",
                "org.pac4j:pac4j-core:$pac4jVersion",
                "org.pac4j:pac4j-http:$pac4jVersion",
                "org.pac4j:pac4j-jwt:$pac4jVersion",
                "org.pac4j:pac4j-mongo:$pac4jVersion",
                "org.pac4j:pac4j-oauth:$pac4jVersion",
                "org.pac4j:pac4j-saml:$pac4jVersion",
                "org.pac4j:pac4j-stormpath:$pac4jVersion",
                "org.pac4j:spring-webmvc-pac4j:$springWebmvcPac4jVersion"

        ],
        persondirectory    : "org.jasig.service.persondir:person-directory-impl:$personDirectoryVersion",
        quartz             : "org.quartz-scheduler:quartz:$quartzVersion",
        shiro              : "org.apache.shiro:shiro-core:$shiroVersion",
        spring             : [
                "org.springframework:spring-aop:$springVersion",
                "org.springframework:spring-beans:$springVersion",
                "org.springframework.webflow:spring-binding:$springWebflowVersion",
                "org.springframework:spring-context:$springVersion",
                "org.springframework:spring-context-support:$springVersion",
                "org.springframework:spring-core:$springVersion",
                "org.springframework.data:spring-data-mongodb:$springDataMongoDbVersion",
                "org.springframework:spring-expression:$springVersion",
                "org.springframework:spring-jdbc:$springVersion",
                "org.springframework:spring-orm:$springVersion",
                "org.springframework:spring-tx:$springVersion",
                "org.springframework:spring-web:$springVersion",
                "org.springframework.webflow:spring-webflow:$springWebflowVersion",
                "org.jasig:spring-webflow-client-repo:$springWebflowClientVersion",
                "org.springframework:spring-webmvc:$springVersion"
        ],
        validationapi      : "javax.validation:validation-api:$javaxValidationVersion",
        xmlapis            : "xml-apis:xml-apis:$xmlapisVersion",
        yubicoapi          : "com.yubico:yubico-validation-client2:$yubicoVersion"
]


buildscript {
    repositories {
        mavenLocal()
        jcenter()
        maven {
            url "https://maven.eveoh.nl/content/repositories/releases"
        }
        maven { url "https://plugins.gradle.org/m2/" }
    }

    dependencies {
        classpath "org.akhikhl.gretty:gretty:1.2.4"
        classpath "nl.eveoh:gradle-aspectj:1.6"
    }
}

allprojects {
    apply plugin: "idea"
    apply plugin: "eclipse"
    apply plugin: "maven"
    apply plugin: "signing"
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'checkstyle'
    apply plugin: 'findbugs'
    apply plugin: 'aspectj'
    apply plugin: 'project-report'
    apply from: rootProject.file("gradle/tasks.gradle")

    ext.libraries = rootProject.ext.libraries;

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()

        maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
        maven { url "http://repo.maven.apache.org/maven2" }
        maven { url "https://jitpack.io" }
        maven { url "http://developer.jasig.org/repo/content/groups/m2-legacy/" }
        maven { url "https://build.shibboleth.net/nexus/content/groups/public" }
        maven { url "http://files.couchbase.com/maven2" }
    }

    test {
        enabled = !Boolean.getBoolean("skipTests")
        maxParallelForks = 1
        useJUnit()
        scanForTestClasses false
        include '**/*Tests.*'
        exclude '**/*Abstract*.*'
        classpath = it.classpath + files("${projectDir}/src/main/resources") +
                files("${projectDir}/src/test/resources")
        testLogging {
            events "failed", "standardError"
            exceptionFormat "full"
        }

    }

    configurations {
        tests

        provided
        compile.extendsFrom(provided)
    }

    configurations.all {
        resolutionStrategy {
            if (!Boolean.getBoolean("skipVersionConflict")) {
                failOnVersionConflict()
            }
        }
        exclude(group: "cglib", module: "cglib")
        exclude(group: "cglib", module: "cglib-full")
    }

    artifacts {
        tests testJar

        archives sourcesJar
        archives javadocJar
        archives testJar
    }

    signing {
        required = (publishReleases && sonatypeUsername != null && sonatypePassword != null)
        sign configurations.archives
    }

    sourceSets {
        test.resources.srcDirs = ["${projectDir}/src/test/resources", "${projectDir}/src/test/java"]
    }

    javadoc {
        classpath += configurations.provided
    }

    jar {
        manifest {
            attributes("Implementation-Title": project.name,
                    "Implementation-Vendor": project.group,
                    "Created-By": project.group,
                    "Implementation-Date": new Date(),
                    "Implementation-Version": project.version)
        }
    }

    checkstyle {
        configFile new File(rootDir, "checkstyle-rules.xml")
        configProperties = ["checkstyle.suppressions.file": new File(rootDir, "checkstyle-suppressions.xml")]
        ignoreFailures false
        showViolations true
        toolVersion "${checkstyleVersion}"
    }

    checkstyleTest {
        enabled = !Boolean.getBoolean("skipCheckstyle")
    }

    checkstyleMain {
        enabled = !Boolean.getBoolean("skipCheckstyle")
    }

    findbugs {
        toolVersion = "${findbugsVersion}"
        sourceSets = [sourceSets.main]
        ignoreFailures = true
        reportsDir = file("$project.buildDir/findbugsReports")
        effort = "max"
        reportLevel = "high"
        visitors = ["FindSqlInjection", "SwitchFallthrough"]
        omitVisitors = ["FindNonShortCircuit"]
        includeFilter = file("$rootProject.projectDir/findbugs-rules.xml")
    }

    findbugsMain {
        enabled = !Boolean.getBoolean("skipFindbugs")
    }

    findbugsTest {
        enabled = !Boolean.getBoolean("skipFindbugs")
    }

    dependencies {
        compile libraries.aspectj
        compile libraries.validationapi
        compile libraries.log4j

        if (!Boolean.getBoolean("skipAspectJ")) {
            compile libraries.inspektr
            aspectpath libraries.inspektr
        }

        if (!Boolean.getBoolean("skipFindbugs")) {
            findbugs libraries.findbugs
            findbugs configurations.findbugsPlugins.dependencies
            findbugsPlugins libraries.findbugscontrib
            findbugsPlugins libraries.findbugssec
        }
        testCompile libraries.tests
        provided libraries.javax
        runtime libraries.javaximpl
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                if (publishReleases) {
                    repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                        authentication(userName: sonatypeUsername, password: sonatypePassword);
                    }
                }

                if (publishSnapshots) {
                    snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots/') {
                        authentication(userName: sonatypeUsername, password: sonatypePassword);
                    }
                }

                pom.project {
                    url "http://www.apereo.org/cas"
                    inceptionYear 2004
                    name project.name
                    description project.name
                    issueManagement {
                        system "Github"
                        url "https://github.com/Jasig/cas/issues"
                    }

                    scm {
                        url 'scm:git@github.com:Jasig/cas.git'
                        connection 'scm:git@github.com:Jasig/cas.git'
                        developerConnection 'scm:git@github.com:Jasig/cas.git'
                    }

                    licenses {
                        license {
                            name 'The Apache Software License, Version 2.0'
                            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                            distribution 'repo'
                        }
                    }

                    developers {
                        developer {
                            id 'leleuj'
                            name 'Jérôme Leleu'
                        }
                        developer {
                            id 'apetro'
                            name 'Andrew Petro'
                        }
                        developer {
                            id 'wgthom'
                            name 'William G. Thompson'
                        }
                        developer {
                            id 'serac'
                            name 'Marvin S. Addison'
                        }
                        developer {
                            id 'battags'
                            name 'Scott Battaglia'
                        }
                        developer {
                            id 'mmoayyed'
                            name 'Misagh Moayyed'
                        }
                        developer {
                            id 'robertoschwald'
                            name 'Robert Oschwald'
                        }
                    }

                    contributors {
                        contributor {
                            name "Adam Rybicki"
                            email "arybicki@unicon.net"
                        }
                        contributor {
                            name "Andrew Tillinghast"
                            email "atilling@conncoll.edu"
                        }
                        contributor {
                            name "Arnaud Lesueur"
                            email "arnaud.lesueur@gmail.com"
                        }
                        contributor {
                            name "Daniel Frett"
                            email "daniel.frett@ccci.org"
                        }
                        contributor {
                            name "Dmitriy Kopylenko"
                            email "dima767@gmail.com"
                        }
                        contributor {
                            name "Drew Mazurek"
                            email "dmazurek@unicon.net"
                        }
                        contributor {
                            name "Eric Dalquist"
                            email "eric.dalquist@doit.wisc.edu"
                        }
                        contributor {
                            name "Eric Pierce"
                            email "epierce@usf.edu"
                        }
                        contributor {
                            name "Frederic Esnault"
                            email "esnault.frederic@gmail.com"
                        }
                        contributor {
                            name "Howard Gilbert"
                            email "Howard.Gilbert@yale.edu"
                        }
                        contributor {
                            name "Jan Van der Velpen"
                            email "velpi@industria.be"
                        }
                        contributor {
                            name "John Martin"
                            email "jmartin@unicon.net"
                        }
                        contributor {
                            name "MarcAntoine Garrigue"
                            email "marc.antoine.garrigue@gmail.com"
                        }
                        contributor {
                            name "Mihir Patel"
                            email "exploremihir@gmail.com"
                        }
                        contributor {
                            name "Fredrik Jönsson"
                            email "fjo@kth.se"
                        }
                    }

                    mailingLists {
                        mailingList {
                            name "cas-user"
                            subscribe "https://groups.google.com/a/apereo.org/forum/#!forum/cas-user"
                            unsubscribe "https://groups.google.com/a/apereo.org/forum/#!forum/cas-user"
                            post "cas-user@apereo.org"
                            archive "https://groups.google.com/forum/#!forum/jasig-cas-user"
                        }
                        mailingList {
                            name "cas-dev"
                            subscribe "https://groups.google.com/a/apereo.org/forum/#!forum/cas-dev"
                            unsubscribe "https://groups.google.com/a/apereo.org/forum/#!forum/cas-dev"
                            post "cas-dev@apereo.org"
                            archive "https://groups.google.com/forum/#!forum/jasig-cas-dev"
                        }
                        mailingList {
                            name "cas-announce"
                            subscribe "https://groups.google.com/a/apereo.org/forum/#!forum/cas-announce"
                            unsubscribe "https://groups.google.com/a/apereo.org/forum/#!forum/cas-announce"
                            post "cas-announce@apereo.org"
                            archive "https://groups.google.com/a/apereo.org/forum/#!forum/cas-announce"
                        }
                    }

                }
            }
        }

    }

}

/**
 * Aggregate all javadocs into a single directory
 **/
task javadoc(type: Javadoc) {
    source subprojects.collect { project -> project.sourceSets.main.allJava }
    destinationDir = new File(buildDir, 'javadoc')
    classpath = files(subprojects.collect { project -> project.sourceSets.main.compileClasspath })
} 
